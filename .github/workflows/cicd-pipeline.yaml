name: Production CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: durga-puja-eks

jobs:
  # ============================================
  # FRONTEND JOBS
  # ============================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test || true
    
    - name: Build application
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true
    
    - name: Check for vulnerabilities
      run: npm audit fix --dry-run || true

  frontend-docker:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        cd frontend
        docker build -t durga-puja-frontend:${{ github.sha }} .
        docker tag durga-puja-frontend:${{ github.sha }} durga-puja-frontend:latest
    
    - name: Save Docker image
      run: |
        docker save durga-puja-frontend:latest | gzip > frontend-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-image
        path: frontend-image.tar.gz
        retention-days: 1

  # ============================================
  # BACKEND JOBS
  # ============================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test || true

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true

  backend-docker:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [backend-test, backend-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        cd backend
        docker build -t durga-puja-backend:${{ github.sha }} .
        docker tag durga-puja-backend:${{ github.sha }} durga-puja-backend:latest
    
    - name: Save Docker image
      run: |
        docker save durga-puja-backend:latest | gzip > backend-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-image
        path: backend-image.tar.gz
        retention-days: 1

  # ============================================
  # INFRASTRUCTURE VALIDATION
  # ============================================
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/terraform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive || true
    
    - name: Terraform Init
      run: terraform init -backend=false
    
    - name: Terraform Validate
      run: terraform validate

  kubernetes-validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
    
    - name: Validate Kubernetes manifests
      run: |
        find infrastructure/kubernetes -name "*.yaml" -type f | xargs kubeval --ignore-missing-schemas || true

  # ============================================
  # DEPLOYMENT (Manual Trigger Only)
  # ============================================
  deploy-to-aws:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: [frontend-docker, backend-docker, terraform-validate, kubernetes-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.head_commit.message contains '[deploy]'
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform Init
      working-directory: ./infrastructure/terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./infrastructure/terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_mongodb_password: ${{ secrets.MONGODB_PASSWORD }}
        TF_VAR_redis_password: ${{ secrets.REDIS_PASSWORD }}
    
    - name: Terraform Apply
      working-directory: ./infrastructure/terraform
      run: terraform apply -auto-approve tfplan
    
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f infrastructure/kubernetes/namespaces/
        kubectl apply -f infrastructure/kubernetes/configmaps/
        kubectl apply -f infrastructure/kubernetes/secrets/
        kubectl apply -f infrastructure/kubernetes/deployments/
        kubectl apply -f infrastructure/kubernetes/services/
        kubectl apply -f infrastructure/kubernetes/ingress/
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/backend -n durga-puja
        kubectl rollout status deployment/frontend -n durga-puja
    
    - name: Get Application URL
      id: get-url
      run: |
        LB_URL=$(kubectl get ingress durga-puja-ingress -n durga-puja -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "url=http://$LB_URL" >> $GITHUB_OUTPUT
        echo "ðŸš€ Application deployed at: http://$LB_URL"

  # ============================================
  # SUMMARY
  # ============================================
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, terraform-validate, kubernetes-validate]
    if: always()
    
    steps:
    - name: Pipeline Status
      run: |
        echo "## ðŸŽ¯ Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Terraform Validation | ${{ needs.terraform-validate.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Kubernetes Validation | ${{ needs.kubernetes-validate.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** To deploy to AWS, include `[deploy]` in commit message" >> $GITHUB_STEP_SUMMARY
